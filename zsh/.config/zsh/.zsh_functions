#!/bin/zsh

# Performance testing
# From https://blog.mattclemente.com/2020/06/26/oh-my-zsh-slow-to-load/
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# Functions
git_push_account_for_tracking = function() {
    tracking=$(git status -sb | grep origin/)

    if [[ $tracking = "" ]]; then
        git push -u origin $(git branch --show-current)
    else
        git push
    fi
}

get_jira_issue_summary = function() {
    jira issue list --plain --columns key,summary > temp_jira_issues;

    echo $(cat temp_jira_issues | rg $(git branch --show-current) | cut -f2)

    rm temp_jira_issues
}

# FZF

# Fuzzy search for files to open in vim or return if escape is pressed
# source:https://stackoverflow.com/a/65375231/2571881
function vim_fzf_result() {
    local fname
    fname=$(fzf) || return
    vim "$fname"
}

function change_branch_fzf() {
    choice=$(git branch | awk '{print $1}' | grep --invert-match \* | fzf \
            --prompt="Switch branch: " \
            --header="Select a branch to switch to" \
            --height 40% --reverse
    )

    git switch $choice
}

function common_directories() {
    dir=$(cat ~/.common_directories | fzf) || return
    cd $dir
}

function add_to_common_dirs() {
    echo $PWD >> ~/.common_directories
}

# gets the column of the argument passed in
function col() {
    awk "{print \$$1}"
}

# gets the row of the argument passed in
function row() {
    sed -n "$1p"
}

### Git

# get root of project
function git_root() {
    cd $(git rev-parse --show-toplevel)
}

## From Chis @ Machine

# Why can I not use exec zsh here?
# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
            zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For completions
        completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
        fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
    completion_file="$(basename "${completion_file_path}")"
    if [ "$2" = true ] && compinit "${completion_file:1}"
}

## k8s namespaces
# funciton to poll existing namespaces and set the in the kubectl context
function k_set_namespace() {
    possible_namespaces=$(kubectl get ns | awk '{print $1}' | tail -n +2)
    # help message if no arguments are passed
    # shows possible namespaces
    if [[ $@ == "--help" || $@ = "-h" || $# -ne 1 ]]; then
        echo "Usage: k_set_namespace <namespace_position>\n"
        echo "Namespace Postition required:\n"
        echo "Select a namespace from the following list:"

        count=1
        for namespace in $(echo $possible_namespaces); do
            echo "$count: $namespace"
            count=$((count+1))
        done

        echo "\n"

        return
    fi

    # the first input is the position of the namespace in the possible_namespaces list
    namespace_position=$1

    # check that input is a number
    if ! [[ $namespace_position =~ ^[0-9]+$ ]]; then
        echo "Error: namespace position must be a number\n"
        echo "Run with --help to see usage"
        return
    fi

    # get possible namespaces
    # tail -n +2 skips the first line which is the header, NAME
    namespace=$( echo $possible_namespaces | sed -n "$namespace_position p")

    # check if namespace is empty
    if [[ -z $namespace ]]; then
        echo "Error: namespace position is out of range\n"
        echo "Run with --help to see namespaces and select a namespace that is in range"
        return
    fi

    # set the namespace
    echo "Setting kubectl context to namespace: $namespace"
    kubectl config set-context --current --namespace=$namespace
}
